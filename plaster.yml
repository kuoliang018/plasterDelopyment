---
- name: PLAY setup global env
  hosts:
    - localhost
  gather_facts: no
  remote_user: root
  become: yes
  vars:
    NODEJS_VERSION: "13"
    ansible_distribution_release: 'bionic'
    backend_dir: '/var/plaster-backend'
    frontend_dir: '/var/www/plaster'
    cert_path: '/etc/letsencrypt/live/ozone.ucsd.edu/fullchain.pem'
    key_path: '/etc/letsencrypt/live/ozone.ucsd.edu/privkey.pem'

  tasks:
#  - name: Install the gpg key for nodejs LTS
#    apt_key:
#      url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
#      state: present
#
#  - name: install nodejs repo
#    apt_repository:
#      repo: "deb https://deb.nodesource.com/node_{{ NODEJS_VERSION }}.x {{ ansible_distribution_release }} main"
#      state: present
#      update_cache: yes
#
#  - name: Install the nodejs
#    apt:
#      name: nodejs
#      state: present
#      update_cache: yes
  - name: Download my_package
    get_url:
      url: "https://deb.nodesource.com/node_13.x/pool/main/n/nodejs/nodejs_13.2.0-1nodesource1_amd64.deb"
      dest: "/home/jbkoh/Downloads/nodejs.deb"

  - name: Install my_package
    apt: deb='/home/jbkoh/Downloads/nodejs.deb'
    become: true

  - name: Check that the /usr/local/bin/python3.6 exists
    stat:
      path: /usr/local/bin/python3.6
    tags: python
    register: python_result

  - name: Check that the /usr/local/bin/python3.6 exists
    stat:
      path: /usr/bin/python3.6
    tags: python
    register: python_result

  - name: Add a Python 3.6 PPA
    apt_repository:
      repo: "ppa:jonathonf/python-3.6"
      state: present
    when: python_result.stat.exists == False

  - name: Ensure dependencies are installed
    apt:
      pkg: ["python3.6", "python3.6-dev", "python3-pip", "python3-setuptools"]
      state: latest
      update_cache: yes
    when: python_result.stat.exists == False

  - name: Install virtualenv via pip
    pip:
      name: virtualenv
      virtualenv_python: "{{ superset_python_executable }}"
      state: latest
    when: python_result.stat.exists == False

  - name: give access to www-data group
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%www-data'
      line: '^%www-data ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'

  - name: Ensure "deployer" group exists
    group:
      name: deployer
      state: present

  - name: add a new user
    user:
      name: deployer
      groups: www-data,deployer
      group: deployer
      append: yes
      state: present
      createhome: yes
      shell: /bin/bash

  - name: install apt deps
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - python-pip
      - virtualenv
      - nginx
      - build-essential
      - python3-dev
      - mongodb

  - name: install latest npm
    command: npm install npm@latest -g

  - name: Creates source directory
    file:
      path: "{{ backend_dir }}"
      state: directory
      owner: deployer
      group: deployer
      mode: 0775

  - name: Creates source directory
    file:
      path: "{{ frontend_dir }}"
      state: directory
      owner: deployer
      group: www-data
      mode: 0775

- name: PLAY deploy codes
  hosts:
    - localhost
  gather_facts: no
  remote_user: deployer
  become: yes
  vars:
    NODEJS_VERSION: "13"
    ansible_distribution_release: "bionic" #trusty
    backend_dir: '/var/plaster-backend'
    frontend_dir: '/var/www/plaster'
    cert_path: '/etc/letsencrypt/live/ozone.ucsd.edu/fullchain.pem'
    key_path: '/etc/letsencrypt/live/ozone.ucsd.edu/privkey.pem'

  tasks:

  - name: get plaster
    become_user: deployer
    become: yes
    register: result
    until: result is succeeded
    retries: 10
    delay: 0
    git:
      repo: git@github.com:jbkoh/plastering-api.git
      dest: "{{ backend_dir }}/plastering-api"
      update: yes
      version: master
      accept_hostkey: yes

  - name: install backend config file
    become_user: deployer
    command: "cp ./configs/backend_config.json {{ backend_dir }}/plastering-api/configs/config.json"

  - name: install plaster server venv
    become_user: deployer
    pip:
      requirements: "{{ backend_dir }}/plastering-api/requirements.txt"
      virtualenv: "{{ backend_dir }}/myprojectenv"
      virtualenv_python: python3.6

  - name: run set up
    become_user: deployer
    command: "{{ backend_dir }}/myprojectenv/bin/python {{ backend_dir }}/plastering-api/setup.py install"
    args:
      chdir: "{{ backend_dir }}/plastering-api/"

  - name: create reset,sh
    become_user: deployer
    command: "cp ./reset.sh {{ backend_dir }}"

    #  - name: run reset
    #    command: /home/k/myproject/reset.sh

  - name: create project file
    become_user: deployer
    command: "cp ./wsgi.py {{ backend_dir }}"

  - name: create uwsgi configuration file
    become_user: deployer
    command: "cp ./myproject.ini {{ backend_dir }}"

  - name: create systemd service file
    command: cp ./myproject.service /etc/systemd/system/

  - name: add user to www-data group
    command: usermod -aG www-data deployer

  - name: start the service
    service:
      name: myproject
      state: restarted

  - name: enable the service
    service:
      name: myproject
      enabled: yes

  #- name: run reset.sh
  #    command: "{{ backend_dir }}/reset.sh"

  - name: create nginx config
    command: cp ./ref /etc/nginx/sites-available/

  - name: create a symlink
    file:
      src: /etc/nginx/sites-available/ref
      dest: /etc/nginx/sites-enabled/ref
      state: link

  - name: git clone frontend code
    become: true
    become_user: deployer
    register: result
    until: result is succeeded
    retries: 10
    delay: 0
    git:
      repo: git@github.com:kuoliang018/plaster-ui.git
      dest: /var/www/plaster/plaster-ui
      force: true
      update: yes
      version: master
      accept_hostkey: yes

  - name: modify access
    file:
      path: /var/www/plaster/plaster-ui
      state: directory
      recurse: yes
      owner: deployer
      group: www-data

  - name: install frontend config file
    command: "cp ./configs/frontend_constants.js {{ frontend_dir }}/plaster-ui/src/constants.js"

  - name: install dependencies
    become_user: deployer
    command: npm install
    args:
      chdir: "{{ frontend_dir }}/plaster-ui"

  - name: build bundle
    command: npm run build
    until: result is succeeded
    args:
      chdir: "{{ frontend_dir }}/plaster-ui"

  - name: start nginx
    become: yes
    command: service nginx restart
    until: result is succeeded

