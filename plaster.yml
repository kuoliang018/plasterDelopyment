---
- hosts:
  - localhost
  remote_user: k
  become: yes
  become_user: root
  gather_facts: no
  vars_prompt:

    - name: username
      prompt: "What is your username?"
      private: no

    - name: cert_path
      prompt: "where is cert.pem?"
      private: no

    - name: key_path
      prompt: "where is key.pem?"
      private: no

  tasks:
  - name: install apt deps
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - python
      - python-pip
      - virtualenv
      - nginx
      - build-essential
      - python3-dev
      - nodejs
      - npm
      - mongodb

  - name: install lastest npm
    command: npm install npm@latest -g

  - name: get plaster
    git:
      repo: https://github.com/jbkoh/plastering-api.git
      dest: /var/myproject/plastering-api
      update: yes
      version: master
      accept_hostkey: yes

  - name: install plaster server venv
    pip:
      requirements: /var/myproject/plastering-api/requirements.txt
      virtualenv: /var/myproject/myprojectenv
      virtualenv_python: python3.6

  - name: run set up
    command: /var/myproject/myprojectenv/bin/python /var/myproject/plastering-api/setup.py install
    args:
      chdir: /var/myproject/plastering-api/
      
   #- name: run set.up
   # command: /var/myproject/myprojectenv/bin/python /var/myproject/plastering-api/setup.py install

  - name: create reset,sh
    command: cp ./reset.sh /var/myproject/

    #  - name: run reset
    #    command: /home/k/myproject/reset.sh

  - name: create project file
    command: cp ./wsgi.py /var/myproject

  - name: create uwsgi configuration file
    command: cp ./myproject.ini /var/myproject

  - name: create systemd service file
    command: cp ./myproject.service /etc/systemd/system/

  - name: add user to www-data group
    command: usermod -aG www-data {{ username }}

  - name: username www-data for all /home/username/*
    file:
      path: /var/myproject/
      state: directory
      recurse: yes
      owner: "{{ username }}"
      group: www-data

  - name: start the service
    service:
      name: myproject
      state: restarted

  - name: enable the service
    service:
      name: myproject
      enabled: yes
  - name: run reset.sh
    command: /var/myproject/reset.sh

  - name: create nginx config
    command: cp ./ref /etc/nginx/sites-available/

  - name: create a symlink
    file: 
      src: /etc/nginx/sites-available/ref
      dest: /etc/nginx/sites-enabled/ref
      state: link

  - name: TO BE CHANGED MAKE A CUSTOME FOLDER
    command: mkdir /etc/customEncript

  - name: TO BE CHANGED copy cert to fake folder
    command: cp {{ cert_path }} /etc/customEncript

  - name: TO BE CHANGED copy key to fake folder
    command: cp {{ key_path }} /etc/customEncript


  - name: git clone frontend code
    git:
      repo: https://github.com/kuoliang018/plaster-ui.git
      dest: /var/www/plaster/plaster-ui
      update: yes
      version: master
      accept_hostkey: yes

  - name: modify access
    file:
      path: /var/www/plaster/plaster-ui
      state: directory
      recurse: yes
      owner: "{{ username }}"
      group: "{{ username }}"

  - name: remove lock
    command: rm /var/www/plaster/plaster-ui/package-lock.json

  - name: install dependencies
    command: npm install
    ignore_errors: yes
    args:
      chdir: /var/www/plaster/plaster-ui


  - name: build bundle
    command: sudo npm run build
    ignore_errors: yes
    args:
      chdir: /var/www/plaster/plaster-ui

  - name: remove node_modules
    file:
      state: absent
      path: /var/www/plaster/plaster-ui/node_modules

  - name: install dependencies again
    command: npm install
    args:
      chdir: /var/www/plaster/plaster-ui

  - name: build bundle again
    command: npm run build
    args:
      chdir: /var/www/plaster/plaster-ui

  - name: start nginx
    command: sudo service nginx restart

