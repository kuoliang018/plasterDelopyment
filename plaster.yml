---
- hosts:
  - localhost
  gather_facts: no
  vars_prompt:

    - name: cert_path
      prompt: "where is cert.pem?"
      private: no

    - name: key_path
      prompt: "where is key.pem?"
      private: no

  remote_user: deployer
  become: yes
  vars:
    NODEJS_VERSION: "13"
    ansible_distribution_release: "xenial" #trusty
  
  tasks:
  - name: Install the gpg key for nodejs LTS
    apt_key:
      url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
      state: present

  - name: Install the nodejs LTS repos
    apt_repository:
      repo: "deb https://deb.nodesource.com/node_{{ NODEJS_VERSION }}.x {{ ansible_distribution_release }} main"
      state: present
      update_cache: no

  - name: Install the nodejs
    apt:
      name: nodejs
      state: present
        
  - name: Check that the /usr/local/bin/python3.6 exists
    stat:
      path: /usr/local/bin/python3.6
    tags: python
    register: python_result
  - name: Update apt-cache
    apt: update_cache=yes
    tags: packages, python
    when: python_result.stat.exists == False
  - name: Install packages needed for installing Python
    apt: pkg={{ item }}
    with_items:
      - wget
      - xz-utils
      - build-essential
      - libsqlite3-dev
      - libreadline-dev
      - libssl-dev
      - openssl
    tags: packages, python
    when: python_result.stat.exists == False
  - name: Extract python 3.6.4 into /tmp
    unarchive:
      src: https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz
      dest: /tmp/
      remote_src: yes
    tags: packages, python
  - name: Configure python 3.6.4
    shell: ./configure chdir=/tmp/Python-3.6.4
    tags: packages, python
    when: python_result.stat.exists == False
  - name: Make
    shell: make chdir=/tmp/Python-3.6.4
    tags: packages, python
    when: python_result.stat.exists == False
  - name: Install Python 3.6.4
    shell: make install chdir=/tmp/Python-3.6.4
    become: yes
    become_user: root
    tags: packages, python
    when: python_result.stat.exists == False
  - name: Remove tmp files used for Python 3.6.4 installation
    file: path={{ item }} state=absent
    with_items:
      - /tmp/Python.tar.xz
      - /tmp/Python-3.6.4
    tags: packages, python
    when: python_result.stat.exists == False
    
  - name: give access to www-data group
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%www-data'
      line: '^%www-data ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'
            
  - name: add a new user
    user: name=deployer group=www-data append=yes state=present createhome=yes

  - name: install apt deps
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - python-pip
      - virtualenv
      - nginx
      - build-essential
      - python3-dev
      - mongodb

  - name: install lastest npm
    command: npm install npm@latest -g

  - name: get plaster
    register: result
    until: result is succeeded
    retries: 10
    delay: 0
    git:
      repo: git@github.com:kuoliang018/plasterDeployment.git
      dest: /var/myproject/plastering-api
      update: yes
      version: master
      accept_hostkey: yes

  - name: install plaster server venv
    pip:
      requirements: /var/myproject/plastering-api/requirements.txt
      virtualenv: /var/myproject/myprojectenv
      virtualenv_python: python3.6

  - name: run set up
    command: /var/myproject/myprojectenv/bin/python /var/myproject/plastering-api/setup.py install
    args:
      chdir: /var/myproject/plastering-api/
      
   #- name: run set.up
   # command: /var/myproject/myprojectenv/bin/python /var/myproject/plastering-api/setup.py install

  - name: create reset,sh
    command: cp ./reset.sh /var/myproject/

    #  - name: run reset
    #    command: /home/k/myproject/reset.sh

  - name: create project file
    command: cp ./wsgi.py /var/myproject

  - name: create uwsgi configuration file
    command: cp ./myproject.ini /var/myproject

  - name: create systemd service file
    command: cp ./myproject.service /etc/systemd/system/

  - name: add user to www-data group
    command: usermod -aG www-data deployer

  - name: username www-data for all /home/username/*
    file:
      path: /var/myproject/
      state: directory
      recurse: yes
      owner: deployer
      group: www-data

  - name: start the service
    service:
      name: myproject
      state: restarted

  - name: enable the service
    service:
      name: myproject
      enabled: yes
  - name: run reset.sh
    command: /var/myproject/reset.sh

  - name: create nginx config
    command: cp ./ref /etc/nginx/sites-available/

  - name: create a symlink
    file: 
      src: /etc/nginx/sites-available/ref
      dest: /etc/nginx/sites-enabled/ref
      state: link

  - name: TO BE CHANGED MAKE A CUSTOME FOLDER
    command: mkdir -p /etc/customEncript

  - name: TO BE CHANGED copy cert to fake folder
    command: cp {{ cert_path }} /etc/customEncript

  - name: TO BE CHANGED copy key to fake folder
    command: cp {{ key_path }} /etc/customEncript


  - name: git clone frontend code
    register: result
    until: result is succeeded
    retries: 10
    delay: 0
    #register: result
    #until: result.results.stdout.find("all systems go") != -1
    #retries: 10
    #delay: 0
    git:
      repo: git@github.com:kuoliang018/plaster-ui.git
      dest: /var/www/plaster/plaster-ui
      update: yes
      version: master
      accept_hostkey: yes

  - name: modify access
    file:
      path: /var/www/plaster/plaster-ui
      state: directory
      recurse: yes
      owner: deployer
      group: www-data

  #- name: remove lock
  #  command: rm /var/www/plaster/plaster-ui/package-lock.json

  - name: install dependencies
    command: npm install
    become_user: deployer
    ignore_errors: yes
    args:
      chdir: /var/www/plaster/plaster-ui


  - name: build bundle
    command: npm run build
    become_user: root
    ignore_errors: yes
    args:
      chdir: /var/www/plaster/plaster-ui

  - name: start nginx
    command: sudo service nginx restart

